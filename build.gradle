plugins {
    id 'java'
    id 'java-library'
    id 'java-test-fixtures'
    id 'org.springframework.boot' version '3.3.11'
    id 'io.spring.dependency-management' version '1.1.7'
    id "com.diffplug.spotless" version "6.8.0"
    id "org.springdoc.openapi-gradle-plugin" version "1.9.0"
    id "net.ltgt.errorprone" version '4.2.0'
}

group = 'com.okestro'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

ext {
    set('springCloudVersion', "2023.0.5")
    set('hikariCPVersion', "6.3.0")
    set('mariadbVersion', "3.3.3")
    set('flywayVersion', "10.12.0")
    set('apacheCommonsVersion', "3.17.0")
    set('validationApiVersion', "2.0.1.Final")
    set('commonsIoVersion', "2.19.0")
    set('springdocVersion', "2.3.0")
    set('nullawayVersion', "0.12.7")
    set('errorProneVersion', "2.38.0")
    set('jspecifyVersion', "1.0.0")
    set('bucket4jVersion', "8.14.0")
}

dependencies {
    // spring-boot-starter
    implementation 'org.springframework.boot:spring-boot-starter-amqp'
    implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    // implementation 'org.springframework.boot:spring-boot-starter-data-rest'
    // implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'org.springframework.cloud:spring-cloud-starter-vault-config'

    // data
    implementation "com.zaxxer:HikariCP:${hikariCPVersion}"
    implementation "org.mariadb.jdbc:mariadb-java-client:${mariadbVersion}"
    implementation "org.flywaydb:flyway-core:${flywayVersion}"
    implementation "org.flywaydb:flyway-mysql"
    implementation 'com.querydsl:querydsl-jpa:5.1.0:jakarta'
    annotationProcessor "com.querydsl:querydsl-apt:5.1.0:jakarta"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"

    /** docs */
    implementation "org.springdoc:springdoc-openapi-starter-webmvc-ui:${springdocVersion}"

    // bucket4j
    implementation "com.bucket4j:bucket4j_jdk17-redis-common:${bucket4jVersion}"
    implementation "com.bucket4j:bucket4j_jdk17-lettuce:${bucket4jVersion}"

    // lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    // common
    implementation "org.apache.commons:commons-lang3:${apacheCommonsVersion}"
    implementation("commons-io:commons-io:${commonsIoVersion}")

    // validation
    implementation "javax.validation:validation-api:${validationApiVersion}"
    implementation 'ru.lanwen.verbalregex:java-verbal-expressions:1.8'

    // nullaway
    errorprone "com.uber.nullaway:nullaway:${nullawayVersion}"
    api "org.jspecify:jspecify:${jspecifyVersion}"
    errorprone "com.google.errorprone:error_prone_core:${errorProneVersion}"

    // test
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'io.projectreactor:reactor-test'
    testImplementation 'org.springframework.amqp:spring-rabbit-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

tasks.named('test') {
    useJUnitPlatform()
}


spotless {
    java {
        importOrder()
        removeUnusedImports()
        trimTrailingWhitespace()
        googleJavaFormat('1.12.0')
        indentWithTabs(2)
        endWithNewline()
        target 'src/*/java/**/*.java'
    }

    format 'misc', {
        target '**/*.gradle', '**/*.md', '**/.gitignore'
        targetExclude '.release/*.*'
        indentWithSpaces()
        trimTrailingWhitespace()
        endWithNewline()
    }
}

openApi {
    customBootRun {
        jvmArgs = ['-Dspring.profiles.active=local,new']
    }
}

springBoot {
    buildInfo {
        properties {}
    }
}

def querydslDir = "src/main/generated"
def testFixturesDir = "testFixtures"
sourceSets {
    main.java.srcDirs += [ querydslDir, testFixturesDir ]
}

tasks.withType(JavaCompile) {
    options.getGeneratedSourceOutputDirectory().set(file(querydslDir))
}

clean.doLast {
    file(querydslDir).deleteDir()
}

tasks.register("compileQClass") {
    group = "querydsl"
    description = "Compile Java sources including QueryDSL without running tests"

    dependsOn("compileJava")
    doLast {
        println("QueryDSL classes compiled without running tests.")
    }
}
import net.ltgt.gradle.errorprone.CheckSeverity

def basePackage = "${group}.resource"
tasks.withType(JavaCompile) {
    options.errorprone {
        check("NullAway", CheckSeverity.ERROR)
        option("NullAway:AnnotatedPackages", "${basePackage}")
        option("NullAway:UnannotatedSubPackages", "${basePackage}.config,${basePackage}.support")
        option("NullAway:ExcludedClassAnnotations", "javax.annotation.processing.Generated,jakarta.persistence.Embeddable,jakarta.persistence.Entity")
    }

    // Include to disable NullAway on test code
    if (name.toLowerCase().contains("test")) {
        options.errorprone {
            disable("NullAway")
        }
    }
}
